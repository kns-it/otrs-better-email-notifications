buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradle_versions_plugin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$gradle_junit_plugin_version"
        classpath "nu.studer:gradle-jooq-plugin:$gradle_jooq_plugin_version"
    }
}

group 'de.knsit'
version '0.0.1'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'nu.studer.jooq'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {

    /* Kotlin Standard-Library */
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    /* Payara libraries */
    providedCompile("fish.payara.extras:payara-micro:$payara_version")

    /* Java EE spec */
    providedCompile("javax:javaee-api:$javaee_api_version")
    implementation("com.fasterxml.jackson.module:jackson-module-jsonSchema:$jackson_module_version")

    /* Swagger */
    implementation("org.webjars:swagger-ui:$swagger_ui_version")
    implementation("io.swagger:swagger-jaxrs:$swagger_jaxrs_version")
    implementation("io.swagger:swagger-jersey2-jaxrs:$swagger_jaxrs_version")

    /* CORS filter */
    implementation("com.thetransactioncompany:cors-filter:$cors_filter_version")

    /* Apache Commons */
    implementation("commons-beanutils:commons-beanutils:$bean_utils_version")
    implementation("commons-io:commons-io:$commons_io_version")

    /* Apache Velocity for templating */
    implementation("org.apache.velocity:velocity:$apache_velocity_version")

    /* Config library */
    implementation('com.jdiazcano.cfg4k:cfg4k-core:0.8.5')
    implementation('com.jdiazcano.cfg4k:cfg4k-yaml:0.8.5')

    /* jOOq */
    implementation("org.jooq:jooq:$jooq_version")
    implementation("org.jooq:jooq-meta:$jooq_version")
    implementation("org.jooq:jooq-codegen:$jooq_version")

    /* JUnit 5 */
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junit_jupiter_version}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junit_platform_version}")
    implementation("org.apache.logging.log4j:log4j-core:${log4j_version}")
    implementation("org.apache.logging.log4j:log4j-api:${log4j_version}")
    testImplementation("org.apache.logging.log4j:log4j-jul:${log4j_version}")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"

}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

/*
enable this to regenerate DAL code
jooq {
    version = jooqVersion
    edition = 'OSS'

    sample(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://localhost:3306/otrs'
            user = 'otrs'
            password = 'otrs'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'otrs'
                includes = 'article|article_type|users|ticket'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                pojos = false
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'de.altran.java.otrsNotifications.dal.generated'
                directory = 'build/generated'
            }
        }
    }
}*/